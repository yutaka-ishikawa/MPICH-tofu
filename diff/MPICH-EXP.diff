diff --git a/modules/libfabric b/modules/libfabric
index a0a9395..f24d5ae 160000
--- a/modules/libfabric
+++ b/modules/libfabric
@@ -1 +1 @@
-Subproject commit a0a9395b8c954d6d8380f6c3fae8d5d48203272a
+Subproject commit f24d5ae65db809fcbadb4b4c0be233b45d9cbb1a-dirty
diff --git a/src/mpi/attr/comm_get_attr.c b/src/mpi/attr/comm_get_attr.c
index afbe4f0..045005e 100644
--- a/src/mpi/attr/comm_get_attr.c
+++ b/src/mpi/attr/comm_get_attr.c
@@ -108,7 +108,13 @@ int MPII_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val,
         switch (attr_idx) {
             case 1:    /* TAG_UB */
             case 2:
-                *attr_val_p = &attr_copy.tag_ub;
+	    {
+		static int usertag_ub;
+		usertag_ub = ((1 << (MPIR_Process.tag_bits - 2)) - 1);
+		fprintf(stderr, "%s: change TAG UB value 0x%08x --> 0x%08x tag_bits(%d) in %s\n", __func__, attr_copy.tag_ub, usertag_ub, MPIR_Process.tag_bits, __FILE__);
+                *attr_val_p = (void*) &usertag_ub;
+	    }
+	    // *attr_val_p = &attr_copy.tag_ub;
                 break;
             case 3:    /* HOST */
             case 4:
diff --git a/src/mpi/pt2pt/send.c b/src/mpi/pt2pt/send.c
index 0d35f1c..407ad88 100644
--- a/src/mpi/pt2pt/send.c
+++ b/src/mpi/pt2pt/send.c
@@ -145,6 +145,7 @@ int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int ta
     /* ... end of body of routine ... */
 
   fn_exit:
+    // fprintf(stdout, "%s return %d\n", __func__, mpi_errno); fflush(stdout);
     MPIR_FUNC_TERSE_PT2PT_EXIT(MPID_STATE_MPI_SEND);
     MPID_THREAD_CS_EXIT(GLOBAL, MPIR_THREAD_GLOBAL_ALLFUNC_MUTEX);
     return mpi_errno;
diff --git a/src/mpid/ch4/netmod/ofi/ofi_capability_sets.h b/src/mpid/ch4/netmod/ofi/ofi_capability_sets.h
index 03cf81b..ccb1eb3 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_capability_sets.h
+++ b/src/mpid/ch4/netmod/ofi/ofi_capability_sets.h
@@ -26,6 +26,7 @@ enum {
     MPIDI_OFI_SET_NUMBER_BGQ,
     MPIDI_OFI_SET_NUMBER_VERBS_RXM,
     MPIDI_OFI_SET_NUMBER_RXM,
+    MPIDI_OFI_SET_NUMBER_TOFU,		// YI
     MPIDI_OFI_NUM_SETS
 };
 
@@ -54,6 +55,8 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_get_set_number(const char *set_name)
         return MPIDI_OFI_SET_NUMBER_RXM;
     } else if (!strcmp(MPIDI_OFI_SET_NAME_MINIMAL, set_name)) {
         return MPIDI_OFI_SET_NUMBER_MINIMAL;
+    } else if (!strcmp("tofu", set_name)) {	// YI
+        return MPIDI_OFI_SET_NUMBER_TOFU;	// YI
     } else {
         return MPIDI_OFI_SET_NUMBER_DEFAULT;
     }
@@ -493,6 +496,74 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_get_set_number(const char *set_name)
 #define MPIDI_OFI_MAJOR_VERSION_MINIMAL             FI_MAJOR_VERSION
 #define MPIDI_OFI_MINOR_VERSION_MINIMAL             FI_MINOR_VERSION
 
+/* YI */
+#define MPIDI_OFI_ENABLE_AV_TABLE_TOFU           MPIDI_OFI_OFF	/* changed */
+#define MPIDI_OFI_ENABLE_SCALABLE_ENDPOINTS_TOFU MPIDI_OFI_ON
+#define MPIDI_OFI_MAX_ENDPOINTS_TOFU             MPIDI_OFI_MAX_ENDPOINTS_SCALABLE
+#define MPIDI_OFI_MAX_ENDPOINTS_BITS_TOFU        MPIDI_OFI_MAX_ENDPOINTS_BITS_SCALABLE
+#define MPIDI_OFI_ENABLE_SHARED_CONTEXTS_TOFU    MPIDI_OFI_OFF	/* changed */
+#define MPIDI_OFI_ENABLE_MR_SCALABLE_TOFU        MPIDI_OFI_OFF	/* changed */
+#define MPIDI_OFI_ENABLE_MR_VIRT_ADDRESS_TOFU    MPIDI_OFI_ON
+#define MPIDI_OFI_ENABLE_MR_ALLOCATED_TOFU       MPIDI_OFI_OFF
+#define MPIDI_OFI_ENABLE_MR_PROV_KEY_TOFU        MPIDI_OFI_ON	/* changed */
+//#define MPIDI_OFI_ENABLE_TAGGED_TOFU             MPIDI_OFI_ON
+#define MPIDI_OFI_ENABLE_RMA_TOFU                MPIDI_OFI_ON
+//#define MPIDI_OFI_ENABLE_AM_TOFU                 MPIDI_OFI_ON
+#define MPIDI_OFI_ENABLE_TAGGED_TOFU             MPIDI_OFI_global.settings.enable_tagged
+//#define MPIDI_OFI_ENABLE_RMA_TOFU                MPIDI_OFI_global.settings.enable_am
+#define MPIDI_OFI_ENABLE_AM_TOFU                 MPIDI_OFI_global.settings.enable_rma
+#define MPIDI_OFI_ENABLE_ATOMICS_TOFU           MPIDI_OFI_OFF
+#define MPIDI_OFI_FETCH_ATOMIC_IOVECS_TOFU       1
+#define MPIDI_OFI_ENABLE_DATA_AUTO_PROGRESS_TOFU MPIDI_OFI_OFF
+#define MPIDI_OFI_ENABLE_CONTROL_AUTO_PROGRESS_TOFU  MPIDI_OFI_OFF
+#define MPIDI_OFI_ENABLE_PT2PT_NOPACK_TOFU       MPIDI_OFI_ON
+#define MPIDI_OFI_ENABLE_HMEM_TOFU               MPIDI_OFI_OFF
+#define MPIDI_OFI_NUM_AM_BUFFERS_TOFU            MPIDI_OFI_MAX_NUM_AM_BUFFERS
+#define MPIDI_OFI_CONTEXT_BITS_TOFU              (16)
+#define MPIDI_OFI_SOURCE_BITS_TOFU               (24)
+#define MPIDI_OFI_TAG_BITS_TOFU                  (20)
+#define MPIDI_OFI_MAJOR_VERSION_TOFU             1
+#define MPIDI_OFI_MINOR_VERSION_TOFU             7
+
+#ifdef MPIDI_CH4_OFI_USE_SET_TOFU
+#define MPIDI_OFI_SET_NUMBER                MPIDI_OFI_SET_NUMBER_TOFU
+#define MPIDI_OFI_ENABLE_AV_TABLE           MPIDI_OFI_ENABLE_AV_TABLE_TOFU
+#define MPIDI_OFI_ENABLE_SCALABLE_ENDPOINTS MPIDI_OFI_ENABLE_SCALABLE_ENDPOINTS_TOFU
+#define MPIDI_OFI_MAX_ENDPOINTS             MPIDI_OFI_MAX_ENDPOINTS_TOFU
+#define MPIDI_OFI_MAX_ENDPOINTS_BITS        MPIDI_OFI_MAX_ENDPOINTS_BITS_TOFU
+#define MPIDI_OFI_ENABLE_SHARED_CONTEXTS    MPIDI_OFI_global.settings.enable_shared_contexts    /* Always controlled by CVAR */
+#define MPIDI_OFI_ENABLE_MR_SCALABLE        MPIDI_OFI_ENABLE_MR_SCALABLE_TOFU
+#define MPIDI_OFI_ENABLE_MR_VIRT_ADDRESS    MPIDI_OFI_ENABLE_MR_VIRT_ADDRESS_TOFU
+#define MPIDI_OFI_ENABLE_MR_ALLOCATED       MPIDI_OFI_ENABLE_MR_ALLOCATED_TOFU
+#define MPIDI_OFI_ENABLE_MR_PROV_KEY        MPIDI_OFI_ENABLE_MR_PROV_KEY_TOFU
+#define MPIDI_OFI_ENABLE_TAGGED             MPIDI_OFI_ENABLE_TAGGED_TOFU
+#define MPIDI_OFI_ENABLE_AM                 MPIDI_OFI_ENABLE_AM_TOFU
+#define MPIDI_OFI_ENABLE_RMA                MPIDI_OFI_ENABLE_RMA_TOFU
+#define MPIDI_OFI_ENABLE_ATOMICS            MPIDI_OFI_ENABLE_ATOMICS_TOFU
+#define MPIDI_OFI_FETCH_ATOMIC_IOVECS       MPIDI_OFI_FETCH_ATOMIC_IOVECS_TOFU
+#define MPIDI_OFI_ENABLE_DATA_AUTO_PROGRESS MPIDI_OFI_ENABLE_DATA_AUTO_PROGRESS_TOFU
+#define MPIDI_OFI_ENABLE_CONTROL_AUTO_PROGRESS  MPIDI_OFI_ENABLE_CONTROL_AUTO_PROGRESS_TOFU
+#define MPIDI_OFI_ENABLE_PT2PT_NOPACK       MPIDI_OFI_ENABLE_PT2PT_NOPACK_TOFU
+#define MPIDI_OFI_ENABLE_HMEM               MPIDI_OFI_ENABLE_HMEM_TOFU
+#define MPIDI_OFI_NUM_AM_BUFFERS            MPIDI_OFI_NUM_AM_BUFFERS_TOFU
+#define MPIDI_OFI_PROTOCOL_MASK             (0x00E0000000000000ULL)
+#define MPIDI_OFI_CONTEXT_MASK              (0x000FFFFF00000000ULL)
+#define MPIDI_OFI_SOURCE_MASK               (0x0000000000000000ULL)     /* Tofu does support immediate data
+                                                                         * so this field is zeroed */
+#define MPIDI_OFI_TAG_MASK                  (0x000000007FFFFFFFULL)
+#define MPIDI_OFI_CONTEXT_BITS              MPIDI_OFI_CONTEXT_BITS_TOFU
+#define MPIDI_OFI_SOURCE_BITS               MPIDI_OFI_SOURCE_BITS_TOFU
+#define MPIDI_OFI_TAG_BITS                  MPIDI_OFI_TAG_BITS_TOFU
+#define MPIDI_OFI_SYNC_SEND_ACK             (0x0010000000000000ULL)
+#define MPIDI_OFI_SYNC_SEND                 (0x0020000000000000ULL)
+#define MPIDI_OFI_DYNPROC_SEND              (0x0040000000000000ULL)
+#define MPIDI_OFI_HUGE_SEND                 (0x0080000000000000ULL)
+#define MPIDI_OFI_MAJOR_VERSION             MPIDI_OFI_MAJOR_VERSION_TOFU
+#define MPIDI_OFI_MINOR_VERSION             MPIDI_OFI_MINOR_VERSION_TOFU
+#define MPIDI_OFI_CONTEXT_STRUCTS           1
+#endif
+/* end of YI */
+
 #ifdef MPIDI_CH4_OFI_USE_SET_RUNTIME
 #define MPIDI_OFI_SET_NUMBER                MPIDI_OFI_SET_NUMBER_DEFAULT
 #define MPIDI_OFI_ENABLE_RUNTIME_CHECKS     1
diff --git a/src/mpid/ch4/netmod/ofi/ofi_events.c b/src/mpid/ch4/netmod/ofi/ofi_events.c
index faf3a18..f114b19 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_events.c
+++ b/src/mpid/ch4/netmod/ofi/ofi_events.c
@@ -83,7 +83,15 @@ static int peek_event(struct fi_cq_tagged_entry *wc, MPIR_Request * rreq)
             recv_elem->event_id = MPIDI_OFI_EVENT_GET_HUGE;
             recv_elem->done_fn = recv_event;
             recv_elem->wc = *wc;
+// YI
+#define TOFU
+#ifdef TOFU /* YI 20201213 */
+            recv_elem->cur_offset = MPIDI_OFI_global.max_short_send;
+	    //printf("%s: YI!!! cur_offset = 0x%lx\n", __func__, recv_elem->cur_offset); fflush(stdout);
+	    //fprintf(stderr, "%s: YI!!! cur_offset = 0x%lx\n", __func__, recv_elem->cur_offset); fflush(stderr);
+#else
             recv_elem->cur_offset = MPIDI_OFI_global.max_msg_size;
+#endif
 
             LL_APPEND(MPIDI_posted_huge_recv_head, MPIDI_posted_huge_recv_tail, huge_list_ptr);
             goto fn_exit;
@@ -222,9 +230,19 @@ static int recv_huge_event(struct fi_cq_tagged_entry *wc, MPIR_Request * rreq)
 
     /* Check that the sender didn't underflow the message by sending less than
      * the huge message threshold. */
+
+#define TOFU
+#ifdef TOFU
+    //printf("%s: YI!!! wc->len(%d), short_send(%d)\n", __func__, wc->len, MPIDI_OFI_global.max_short_send); fflush(stdout);
+    //fprintf(stderr, "%s: YI!!! wc->len(%d), short_send(%d)\n", __func__, wc->len, MPIDI_OFI_global.max_short_send); fflush(stderr);
+    if (wc->len < MPIDI_OFI_global.max_short_send) {
+        return recv_event(wc, rreq, MPIDI_OFI_REQUEST(rreq, event_id));
+    }
+#else
     if (wc->len < MPIDI_OFI_global.max_msg_size) {
         return recv_event(wc, rreq, MPIDI_OFI_REQUEST(rreq, event_id));
     }
+#endif
 
     comm_ptr = rreq->comm;
 
@@ -757,6 +775,7 @@ int MPIDI_OFI_dispatch_function(struct fi_cq_tagged_entry *wc, MPIR_Request * re
 {
     int mpi_errno = MPI_SUCCESS;
 
+    // printf("%s: YI!!! MPIDI_OFI_REQUEST = %d MPIDI_OFI_EVENT_SEND_HUGE(%d) in %s\n", __func__, MPIDI_OFI_REQUEST(req, event_id),MPIDI_OFI_EVENT_SEND_HUGE,  __FILE__); fflush(stdout);
     if (likely(MPIDI_OFI_REQUEST(req, event_id) == MPIDI_OFI_EVENT_SEND)) {
         /* Passing the event_id as a parameter; do not need to load it from the
          * request object each time the send_event handler is invoked */
diff --git a/src/mpid/ch4/netmod/ofi/ofi_init.c b/src/mpid/ch4/netmod/ofi/ofi_init.c
index 7ea9792..4ae1193 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_init.c
+++ b/src/mpid/ch4/netmod/ofi/ofi_init.c
@@ -418,6 +418,8 @@ static void host_free_registered(void *ptr)
 
 static int get_ofi_version(void)
 {
+    // fprintf(stderr, "YI****** %s MPIDI_OFI_MAJOR_VERSION(%d) MPIDI_OFI_MINOR_VERSION(%d)\n", __func__, MPIDI_OFI_MAJOR_VERSION, MPIDI_OFI_MINOR_VERSION);
+    // fprintf(stderr, "YI****** %s FI_MAJOR_VERSION(%d) FI_MINOR_VERSION(%d)\n", __func__, FI_MAJOR_VERSION, FI_MINOR_VERSION);
     if (MPIDI_OFI_MAJOR_VERSION != -1 && MPIDI_OFI_MINOR_VERSION != -1)
         return FI_VERSION(MPIDI_OFI_MAJOR_VERSION, MPIDI_OFI_MINOR_VERSION);
     else
@@ -701,6 +703,8 @@ int MPIDI_OFI_mpi_init_hook(int rank, int size, int appnum, int *tag_bits, MPIR_
     if (MPIDI_OFI_ENABLE_AM) {
         /* Maximum possible message size for short message send (=eager send)
          * See MPIDI_OFI_do_am_isend for short/long switching logic */
+	//fprintf(stderr, "YI**** %s/%s MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE(%ld) <= MPIDI_OFI_global.max_msg_size(%ld))\n",
+	//	__func__, __FILE__, MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE, MPIDI_OFI_global.max_msg_size);
         MPIR_Assert(MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE <= MPIDI_OFI_global.max_msg_size);
         MPL_COMPILE_TIME_ASSERT(sizeof(MPIDI_OFI_am_request_header_t)
                                 < MPIDI_OFI_AM_HDR_POOL_CELL_SIZE);
@@ -1350,10 +1354,12 @@ static int open_fabric(void)
                             mpi_errno, MPI_ERR_OTHER, "**ofi_provider_mismatch");
     }
 
+    fprintf(stderr, "\t YI[%s]**3** MPIDI_OFI_global.settings.enable_tagged = %d\n", __func__, MPIDI_OFI_global.settings.enable_tagged);
     /* Third, update global settings */
     if (MPIDI_OFI_ENABLE_RUNTIME_CHECKS) {
         update_global_settings(prov, hints);
     }
+    fprintf(stderr, "\t YI[%s]**4** MPIDI_OFI_global.settings.enable_tagged = %d\n", __func__, MPIDI_OFI_global.settings.enable_tagged);
 
     MPIDI_OFI_global.prov_use = fi_dupinfo(prov);
     MPIR_Assert(MPIDI_OFI_global.prov_use);
@@ -1385,6 +1391,7 @@ static int open_fabric(void)
     if (MPIR_CVAR_CH4_OFI_CAPABILITY_SETS_DEBUG && MPIR_Process.rank == 0) {
         dump_global_settings();
     }
+    fprintf(stderr, "\t YI[%s]**4** MPIDI_OFI_global.settings.enable_tagged = %d\n", __func__, MPIDI_OFI_global.settings.enable_tagged);
 
     /* Finally open the fabric */
     MPIDI_OFI_CALL(fi_fabric(prov->fabric_attr, &MPIDI_OFI_global.fabric, NULL), fabric);
@@ -1623,6 +1630,12 @@ static void init_global_settings(const char *prov_name)
     /* As of OFI version 1.5, FI_MR_SCALABLE and FI_MR_BASIC are deprecated. Internally, we now use
      * FI_MR_VIRT_ADDRESS and FI_MR_PROV_KEY so set them appropriately depending on the OFI version
      * being used. */
+    /* YI added */
+    UPDATE_SETTING_BY_CAP(major_version, MPIR_CVAR_CH4_OFI_MAJOR_VERSION);
+    UPDATE_SETTING_BY_CAP(minor_version, MPIR_CVAR_CH4_OFI_MINOR_VERSION);
+    /* end of YI */
+    // printf("YI[%d]**** %s in %s get_ofi_version() = %x FI_VERSION(1, 5) = %x\n", getpid(), __func__, __FILE__, get_ofi_version(), FI_VERSION(1, 5));
+    // fprintf(stderr, "YI[%d]**** %s in %s get_ofi_version() = %x FI_VERSION(1, 5) = %x\n", getpid(), __func__, __FILE__, get_ofi_version(), FI_VERSION(1, 5));
     if (get_ofi_version() < FI_VERSION(1, 5)) {
         /* If the OFI library is 1.5 or less, query whether or not to use FI_MR_SCALABLE and set
          * FI_MR_VIRT_ADDRESS, FI_MR_ALLOCATED, and FI_MR_PROV_KEY as the opposite values. */
@@ -1631,14 +1644,20 @@ static void init_global_settings(const char *prov_name)
             MPIDI_OFI_global.settings.enable_mr_prov_key =
             MPIDI_OFI_global.settings.enable_mr_allocated =
             !MPIDI_OFI_global.settings.enable_mr_virt_address;
+	// printf("\t YI[%d]**1** MPIDI_OFI_global.settings.enable_mr_virt_address = %d\n", getpid(), MPIDI_OFI_global.settings.enable_mr_virt_address);
+	// fprintf(stderr, "\t YI[%d]**1** MPIDI_OFI_global.settings.enable_mr_virt_address = %d\n", getpid(), MPIDI_OFI_global.settings.enable_mr_virt_address);
     } else {
         UPDATE_SETTING_BY_CAP(enable_mr_virt_address, MPIR_CVAR_CH4_OFI_ENABLE_MR_VIRT_ADDRESS);
         UPDATE_SETTING_BY_CAP(enable_mr_allocated, MPIR_CVAR_CH4_OFI_ENABLE_MR_ALLOCATED);
         UPDATE_SETTING_BY_CAP(enable_mr_prov_key, MPIR_CVAR_CH4_OFI_ENABLE_MR_PROV_KEY);
+	// printf("\t YI[%d]**2** MPIDI_OFI_global.settings.enable_mr_virt_address = %d\n", getpid(), MPIDI_OFI_global.settings.enable_mr_virt_address);
+	// fprintf(stderr, "\t YI[%d]**2** MPIDI_OFI_global.settings.enable_mr_virt_address = %d\n", getpid(), MPIDI_OFI_global.settings.enable_mr_virt_address);
     }
+
     UPDATE_SETTING_BY_CAP(enable_tagged, MPIR_CVAR_CH4_OFI_ENABLE_TAGGED);
     UPDATE_SETTING_BY_CAP(enable_am, MPIR_CVAR_CH4_OFI_ENABLE_AM);
     UPDATE_SETTING_BY_CAP(enable_rma, MPIR_CVAR_CH4_OFI_ENABLE_RMA);
+    fprintf(stderr, "\t YI[%d]**2** MPIDI_OFI_global.settings.enable_tagged = %d by prov_name(%s)\n", getpid(), MPIDI_OFI_global.settings.enable_tagged, prov_name);
     /* try to enable atomics only when RMA is enabled */
     if (MPIDI_OFI_ENABLE_RMA) {
         UPDATE_SETTING_BY_CAP(enable_atomics, MPIR_CVAR_CH4_OFI_ENABLE_ATOMICS);
@@ -1653,8 +1672,10 @@ static void init_global_settings(const char *prov_name)
     UPDATE_SETTING_BY_CAP(context_bits, MPIR_CVAR_CH4_OFI_CONTEXT_ID_BITS);
     UPDATE_SETTING_BY_CAP(source_bits, MPIR_CVAR_CH4_OFI_RANK_BITS);
     UPDATE_SETTING_BY_CAP(tag_bits, MPIR_CVAR_CH4_OFI_TAG_BITS);
+#if 0 /* YI */
     UPDATE_SETTING_BY_CAP(major_version, MPIR_CVAR_CH4_OFI_MAJOR_VERSION);
     UPDATE_SETTING_BY_CAP(minor_version, MPIR_CVAR_CH4_OFI_MINOR_VERSION);
+#endif
     UPDATE_SETTING_BY_CAP(num_am_buffers, MPIR_CVAR_CH4_OFI_NUM_AM_BUFFERS);
     if (MPIDI_OFI_global.settings.num_am_buffers < 0) {
         MPIDI_OFI_global.settings.num_am_buffers = 0;
@@ -2057,3 +2078,33 @@ static int addr_exchange_all_vnis(void)
   fn_fail:
     goto fn_exit;
 }
+
+// YI
+int MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE;
+void
+yi_workarround()
+{
+    int mpi_errno = MPI_SUCCESS;
+    int rc;
+    const char *tmp_str;
+    static int initialized = FALSE;
+    MPIR_T_cvar_value_t defaultval;
+
+    defaultval.d = 16*1024;
+    MPIR_T_CVAR_REGISTER_STATIC(
+	MPI_INT,
+	MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE, /* name */
+	&MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE, /* address */
+	1, /* count */
+	MPI_T_VERBOSITY_USER_BASIC,
+	MPI_T_SCOPE_LOCAL,
+	defaultval,
+	"CH4_OFI", /* category */
+	"This cvar controls the message size at which OFI native path switches from eager to rendezvous mode. It affect the AM path eager limit. OFI will init the MPIDI_OFI_global.max_short_send to the value of cvar. The default value is (16*1024).");
+    MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE= 16*1024;
+    rc = MPL_env2int("MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE", &(MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE));
+    MPIR_ERR_CHKANDJUMP1((-1 == rc),mpi_errno,MPI_ERR_OTHER,"**envvarparse","**envvarparse %s","MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE");
+    MPIDI_OFI_global.max_short_send = MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE;
+fn_fail:
+    fprintf(stderr, "%s: YI*** MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE = %d\n", __func__, MPIR_CVAR_CH4_OFI_SHORT_SEND_SIZE);
+}
diff --git a/src/mpid/ch4/netmod/ofi/ofi_recv.h b/src/mpid/ch4/netmod/ofi/ofi_recv.h
index 9f8bc84..824e8a9 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_recv.h
+++ b/src/mpid/ch4/netmod/ofi/ofi_recv.h
@@ -165,8 +165,16 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_do_irecv(void *buf,
     }
 
     if (!dt_contig && data_sz) {
+#define TOFU
+#ifdef TOFU
+        if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_short_send &&
+            !force_gpu_pack) {
+	    //printf("%s: data_sz(%d)\n", __func__, data_sz); fflush(stdout);
+	    //fprintf(stderr, "%s: data_sz(%d)\n", __func__, data_sz); fflush(stderr);
+#else
         if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_msg_size &&
             !force_gpu_pack) {
+#endif
             mpi_errno =
                 MPIDI_OFI_recv_iov(buf, count, data_sz, rank, match_bits, mask_bits, comm,
                                    context_id, addr, vni_src, vni_dst, rreq, dt_ptr, flags);
@@ -205,9 +213,16 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_do_irecv(void *buf,
     }
     MPIDI_OFI_REQUEST(rreq, util_id) = context_id;
 
+#define TOFU
+#ifdef TOFU
+    if (unlikely(data_sz >= MPIDI_OFI_global.max_short_send)) {
+        MPIDI_OFI_REQUEST(rreq, event_id) = MPIDI_OFI_EVENT_RECV_HUGE;
+        data_sz = MPIDI_OFI_global.max_short_send;
+#else
     if (unlikely(data_sz >= MPIDI_OFI_global.max_msg_size)) {
         MPIDI_OFI_REQUEST(rreq, event_id) = MPIDI_OFI_EVENT_RECV_HUGE;
         data_sz = MPIDI_OFI_global.max_msg_size;
+#endif
     } else if (MPIDI_OFI_REQUEST(rreq, event_id) != MPIDI_OFI_EVENT_RECV_PACK)
         MPIDI_OFI_REQUEST(rreq, event_id) = MPIDI_OFI_EVENT_RECV;
 
diff --git a/src/mpid/ch4/netmod/ofi/ofi_send.h b/src/mpid/ch4/netmod/ofi/ofi_send.h
index a5723aa..7cc0106 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_send.h
+++ b/src/mpid/ch4/netmod/ofi/ofi_send.h
@@ -190,8 +190,14 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
     }
 
     if (!dt_contig && data_sz) {
+#define TOFU
+#ifdef TOFU
+        if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_short_send &&
+            !force_gpu_pack) {
+#else
         if (MPIDI_OFI_ENABLE_PT2PT_NOPACK && data_sz < MPIDI_OFI_global.max_msg_size &&
             !force_gpu_pack) {
+#endif
             mpi_errno = MPIDI_OFI_send_iov(buf, count, data_sz, cq_data, dst_rank, match_bits,
                                            comm, addr, vni_src, vni_dst, sreq, dt_ptr);
             if (mpi_errno == MPI_SUCCESS)       /* Send posted using iov */
@@ -235,7 +241,15 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
                                             match_bits), vni_local, tinjectdata,
                              FALSE /* eagain */);
         MPIDI_OFI_send_event(NULL, sreq, MPIDI_OFI_REQUEST(sreq, event_id));
+// YI
+#define TOFU
+#ifdef TOFU // YI 20201212
+    } else if (data_sz < MPIDI_OFI_global.max_short_send) {
+	//printf("%s: data_sz(%d) <= short(%d)\n", __func__, data_sz, MPIDI_OFI_global.max_short_send); fflush(stdout);
+	//fprintf(stderr, "%s: data_sz(%d) <= short(%d)\n", __func__, data_sz, MPIDI_OFI_global.max_short_send); fflush(stderr);
+#else
     } else if (data_sz < MPIDI_OFI_global.max_msg_size) {
+#endif
         MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
                                           send_buf, data_sz, NULL /* desc */ ,
                                           cq_data,
@@ -286,6 +300,19 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
         MPIR_Comm_add_ref(comm);
         MPIDI_OFI_REQUEST(sreq, util_id) = dst_rank;
         match_bits |= MPIDI_OFI_HUGE_SEND;      /* Add the bit for a huge message */
+// YI
+#define TOFU
+#ifdef TOFU /* YI 20201214 */
+	//printf("%s: calling fi_tsenddata(0x%lx)\n", __func__, MPIDI_OFI_global.max_short_send); fflush(stdout);
+	//fprintf(stderr, "%s: calling fi_tsenddata(0x%lx)\n", __func__, MPIDI_OFI_global.max_short_send); fflush(stderr);
+        MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
+                                          send_buf, MPIDI_OFI_global.max_short_send, NULL /* desc */ ,
+                                          cq_data,
+                                          MPIDI_OFI_av_to_phys(addr, vni_local, vni_remote),
+                                          match_bits,
+                                          (void *) &(MPIDI_OFI_REQUEST(sreq, context))),
+                             vni_local, tsenddata, FALSE /* eagain */);
+#else
         MPIDI_OFI_CALL_RETRY(fi_tsenddata(MPIDI_OFI_global.ctx[vni_src].tx,
                                           send_buf, MPIDI_OFI_global.max_msg_size, NULL /* desc */ ,
                                           cq_data,
@@ -293,6 +320,7 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_OFI_send_normal(const void *buf, MPI_Aint cou
                                           match_bits,
                                           (void *) &(MPIDI_OFI_REQUEST(sreq, context))),
                              vni_local, tsenddata, FALSE /* eagain */);
+#endif
         ctrl.type = MPIDI_OFI_CTRL_HUGE;
         ctrl.seqno = 0;
         ctrl.tag = tag;
diff --git a/src/mpid/ch4/netmod/ofi/ofi_types.h b/src/mpid/ch4/netmod/ofi/ofi_types.h
index 1a5535a..5923164 100644
--- a/src/mpid/ch4/netmod/ofi/ofi_types.h
+++ b/src/mpid/ch4/netmod/ofi/ofi_types.h
@@ -27,7 +27,8 @@
 #define MPIDI_OFI_MAX_VNIS                  16
 
 #define MPIDI_OFI_MAP_NOT_FOUND            ((void*)(-1UL))
-#define MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE  (16 * 1024)
+// #define MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE  (16 * 1024)
+#define MPIDI_OFI_DEFAULT_SHORT_SEND_SIZE  (MPIDI_OFI_global.max_short_send)	// YI
 #define MPIDI_OFI_MAX_NUM_AM_BUFFERS       (8)
 #define MPIDI_OFI_AM_BUFF_SZ               (1 * 1024 * 1024)
 #define MPIDI_OFI_CACHELINE_SIZE           (MPL_CACHELINE_SIZE)
diff --git a/src/mpid/ch4/netmod/ofi/subconfigure.m4 b/src/mpid/ch4/netmod/ofi/subconfigure.m4
index 00c53fd..7bf7b75 100644
--- a/src/mpid/ch4/netmod/ofi/subconfigure.m4
+++ b/src/mpid/ch4/netmod/ofi/subconfigure.m4
@@ -72,6 +72,7 @@ AM_COND_IF([BUILD_CH4_NETMOD_OFI],[
         enable_mrail="no"
         enable_efa="no"
         enable_netdir="no"
+	enable_tofu="no"
     else
         enable_psm="yes"
         enable_psm2="yes"
@@ -91,6 +92,7 @@ AM_COND_IF([BUILD_CH4_NETMOD_OFI],[
         enable_mrail="yes"
         enable_efa="yes"
         enable_netdir="yes"
+	enable_tofu="yes"
     fi
 
     for provider in $netmod_args ; do
@@ -116,6 +118,9 @@ AM_COND_IF([BUILD_CH4_NETMOD_OFI],[
                 enable_verbs="yes"
                 enable_rxm="yes"
                 ;;
+	    "tofu")
+		enable_tofu="yes"
+		;;
 
             dnl For these providers, we don't know exactly which capabilities we
             dnl want to select by default so we turn on runtime checks. At some point
@@ -201,6 +206,10 @@ AM_COND_IF([BUILD_CH4_NETMOD_OFI],[
                 AC_DEFINE([MPIDI_CH4_OFI_USE_SET_BGQ], [1], [Define to use bgq capability set])
                 enable_bgq="yes"
                 ;;
+            "tofu")
+                AC_DEFINE([MPIDI_CH4_OFI_USE_SET_TOFU], [1], [Define to use tofu capability set])
+                enable_netdir="yes"
+                ;;
             "verbs")
                 AC_DEFINE([MPIDI_CH4_OFI_USE_SET_RUNTIME], [1], [Define to use runtime capability set])
                 enable_verbs="yes"
@@ -287,6 +296,7 @@ AM_COND_IF([BUILD_CH4_NETMOD_OFI],[
             prov_config="$prov_config --enable-mrail=${enable_mrail}"
             prov_config="$prov_config --enable-efa=${enable_efa}"
             prov_config="$prov_config --enable-netdir=${enable_netdir}"
+            prov_config="$prov_config --enable-netdir=${enable_tofu}"
         fi
 
         if test "x${ofi_direct_provider}" != "x" ; then
diff --git a/src/mpid/ch4/netmod/ofi/util.c b/src/mpid/ch4/netmod/ofi/util.c
index bd6f724..9cd90b4 100644
--- a/src/mpid/ch4/netmod/ofi/util.c
+++ b/src/mpid/ch4/netmod/ofi/util.c
@@ -175,7 +175,14 @@ static int MPIDI_OFI_get_huge(MPIDI_OFI_send_control_t * info)
     }
 
     recv_elem->event_id = MPIDI_OFI_EVENT_GET_HUGE;
+// YI
+#define TOFU
+#ifdef TOFU /* YI 20201213 */
+    recv_elem->cur_offset = MPIDI_OFI_global.max_short_send;
+#else
     recv_elem->cur_offset = MPIDI_OFI_global.max_msg_size;
+#endif
+    // fprintf(stderr, "YI!!!! %s: cur_offset(0x%lx)\n", __func__, recv_elem->cur_offset); fflush(stderr); fprintf(stdout, "YI!!!! %s: cur_offset(0x%lx)\n", __func__, recv_elem->cur_offset); fflush(stdout);
     recv_elem->remote_info = *info;
     recv_elem->comm_ptr = comm_ptr;
     recv_elem->next = NULL;
diff --git a/src/mpid/ch4/src/ch4_coll_impl.h b/src/mpid/ch4/src/ch4_coll_impl.h
index ae84fdf..b71521a 100644
--- a/src/mpid/ch4/src/ch4_coll_impl.h
+++ b/src/mpid/ch4/src/ch4_coll_impl.h
@@ -361,8 +361,10 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_Reduce_intra_composition_alpha(const void *se
         mpi_errno = MPIDI_SHM_mpi_reduce(sendbuf, recvbuf, count, datatype, op, 0, comm->node_comm,
                                          errflag);
 #else
+	// fprintf(stderr, "YI %s ==> calling MPIDI_NM_mpi_reduce(sendbuf=%p, recvbuf=%p) in %s\n", __func__, sendbuf, recvbuf, __FILE__);
         mpi_errno = MPIDI_NM_mpi_reduce(sendbuf, recvbuf, count, datatype, op, 0, comm->node_comm,
                                         errflag);
+	// fprintf(stderr, "YI %s <== return from MPIDI_NM_mpi_reduce\n", __func__);
 #endif /* MPIDI_CH4_DIRECT_NETMOD */
 
         if (mpi_errno) {
@@ -375,16 +377,30 @@ MPL_STATIC_INLINE_PREFIX int MPIDI_Reduce_intra_composition_alpha(const void *se
         }
         /* recvbuf becomes the sendbuf for internode reduce */
         inter_sendbuf = recvbuf;
+	// fprintf(stderr, "YI %s inter_sendbuf = recvbuf = %p\n", __func__, recvbuf);
     } else {
         inter_sendbuf = (sendbuf == MPI_IN_PLACE) ? recvbuf : sendbuf;
+	// fprintf(stderr, "YI %s inter_sendbuf = %p\n", __func__, inter_sendbuf);
     }
 
     /* internode reduce with rank 0 in node_roots_comm as the root */
     if (comm->node_roots_comm != NULL) {
+	fprintf(stderr, "YI CHANGED %s ==> calling MPIDI_NM_mpi_reduce comm->node_roots_comm->rank(%d) in %s\n", __func__, comm->node_roots_comm->rank, __FILE__);
+	if (inter_sendbuf == recvbuf && comm->node_roots_comm->rank == 0) {
+	    mpi_errno =
+		MPIDI_NM_mpi_reduce(MPI_IN_PLACE,
+                                recvbuf, count, datatype, op, 0, comm->node_roots_comm, errflag);
+	} else {
+	    mpi_errno =
+		MPIDI_NM_mpi_reduce(inter_sendbuf,
+                                recvbuf, count, datatype, op, 0, comm->node_roots_comm, errflag);
+	}
+/*
         mpi_errno =
             MPIDI_NM_mpi_reduce(comm->node_roots_comm->rank == 0 ? MPI_IN_PLACE : inter_sendbuf,
                                 recvbuf, count, datatype, op, 0, comm->node_roots_comm, errflag);
-
+*/
+	// fprintf(stderr, "YI %s <== return from MPIDI_NM_mpi_reduce\n", __func__);
         if (mpi_errno) {
             /* for communication errors, just record the error but continue */
             *errflag =
